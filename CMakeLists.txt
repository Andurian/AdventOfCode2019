CMAKE_MINIMUM_REQUIRED(VERSION 3.10)

PROJECT( AdventOfCode2019 )

SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)

SET(CMAKE_CXX_STANDARD 17)

# Somehow GCC does not like the way conan links to boost?
IF (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
	SET(CMAKE_EXE_LINKER_FLAGS  "${CMAKE_EXE_LINKER_FLAGS} -z muldefs")
	SET(EIGEN_PKG CONAN_PKG::Eigen3)
	INCLUDE(${CMAKE_CURRENT_BINARY_DIR}/conanbuildinfo.cmake)
ELSE()
	SET(EIGEN_PKG CONAN_PKG::Eigen3)
	ADD_DEFINITIONS(-DNOMINMAX)
	INCLUDE(${CMAKE_CURRENT_BINARY_DIR}/conanbuildinfo.cmake)
ENDIF()

ADD_DEFINITIONS(-D_SILENCE_ALL_CXX17_DEPRECATION_WARNINGS)
ADD_DEFINITIONS(-D_USE_MATH_DEFINES)

INCLUDE(CheckIncludeFileCXX)

CHECK_INCLUDE_FILE_CXX(optional HAVE_CXX17_OPTIONAL)
CHECK_INCLUDE_FILE_CXX(experimental/optional HAVE_EXPERIMENTAL_OPTIONAL)

if (HAVE_CXX17_OPTIONAL)
	ADD_COMPILE_DEFINITIONS(USE_STD_OPTIONAL)
else (HAVE_CXX17_OPTIONAL)
	if(HAVE_EXPERIMENTAL_OPTIONAL)
		add_compile_definitions(USE_EXPERIMENTAL_OPTIONAL)
	else (HAVE_EXPERIMENTAL_OPTIONAL)
		message(FATAL_ERROR "No optional found. Cannot build.")
	endif (HAVE_EXPERIMENTAL_OPTIONAL)
endif(HAVE_CXX17_OPTIONAL)

CONAN_BASIC_SETUP(TARGETS)

SET( PROJECTS
	common
	intprogram
	day_01
	day_02
	day_03
	day_04
	day_05
	day_06
	day_07
	day_08
	day_09
	day_10
	day_11
	day_12
	day_13
	day_14
	day_15
	day_16
	day_17
	day_18
	day_19
	day_20
)

FOREACH(P IN LISTS PROJECTS)
	ADD_SUBDIRECTORY( ${P} ${CMAKE_CURRENT_BINARY_DIR}/${P} )
ENDFOREACH()
